{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/volume/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Transform, TransformCallback, TransformOptions } from 'stream';\n\nexport enum VolumeTransformerType {\n\tS16LE = 's16le',\n\tS16BE = 's16be',\n\tS32LE = 's32le',\n\tS32BE = 's32be',\n}\n\nexport interface VolumeTransformerConfig extends TransformOptions {\n\ttype: VolumeTransformerType;\n\tvolume?: number;\n}\n\nexport class VolumeTransformer extends Transform {\n\tprivate buffer: Buffer;\n\tprivate readonly bytes: number;\n\tprivate readonly extrema: [number, number];\n\n\tpublic readonly volume: number;\n\n\tpublic constructor(config: VolumeTransformerConfig) {\n\t\tsuper(config);\n\t\tthis.volume = config.volume ?? 1;\n\t\tthis.buffer = Buffer.allocUnsafe(0);\n\n\t\tswitch (config.type) {\n\t\t\tcase VolumeTransformerType.S16LE:\n\t\t\t\tthis.readInt = (buffer, index) => buffer.readInt16LE(index);\n\t\t\t\tthis.writeInt = (buffer, value, index) => buffer.writeInt16LE(value, index);\n\t\t\t\tbreak;\n\t\t\tcase VolumeTransformerType.S16BE:\n\t\t\t\tthis.readInt = (buffer, index) => buffer.readInt16BE(index);\n\t\t\t\tthis.writeInt = (buffer, value, index) => buffer.writeInt16BE(value, index);\n\t\t\t\tbreak;\n\t\t\tcase VolumeTransformerType.S32LE:\n\t\t\t\tthis.readInt = (buffer, index) => buffer.readInt32LE(index);\n\t\t\t\tthis.writeInt = (buffer, value, index) => buffer.writeInt32LE(value, index);\n\t\t\t\tbreak;\n\t\t\tcase VolumeTransformerType.S32BE:\n\t\t\t\tthis.readInt = (buffer, index) => buffer.readInt32BE(index);\n\t\t\t\tthis.writeInt = (buffer, value, index) => buffer.writeInt32BE(value, index);\n\t\t\t\tbreak;\n\t\t}\n\n\t\tconst bits = config.type === VolumeTransformerType.S16LE || config.type === VolumeTransformerType.S16BE ? 16 : 32;\n\t\tthis.bytes = Math.floor(bits / 8);\n\t\tthis.extrema = [-Math.pow(2, bits - 1), Math.pow(2, bits - 1) - 1];\n\t}\n\n\tprivate readInt(buffer: Buffer, index: number): number;\n\tprivate readInt(): number {\n\t\tthrow new Error('readInt is unimplemented');\n\t}\n\n\tprivate writeInt(buffer: Buffer, value: number, index: number): number;\n\tprivate writeInt(): number {\n\t\tthrow new Error('writeInt is unimplemented');\n\t}\n\n\tprivate clamp(value: number) {\n\t\tconst [neg, pos] = this.extrema;\n\t\treturn Math.min(pos, Math.max(neg, value));\n\t}\n\n\tpublic _transform(newChunk: Buffer, encoding: BufferEncoding, done: TransformCallback): void {\n\t\t// Act as passthrough for volume 1\n\t\tif (this.volume === 1) {\n\t\t\tthis.push(newChunk);\n\t\t\tdone();\n\t\t\treturn;\n\t\t}\n\n\t\tconst { bytes } = this;\n\t\tconst chunk = Buffer.concat([this.buffer, newChunk]);\n\n\t\tconst readableLength = Math.floor(chunk.length / bytes) * bytes;\n\n\t\tlet i = 0;\n\t\twhile (i < readableLength) {\n\t\t\tthis.writeInt(chunk, this.clamp(this.readInt(chunk, i) * this.volume), i);\n\t\t\ti += bytes;\n\t\t}\n\n\t\tthis.buffer = chunk.slice(readableLength);\n\t\tthis.push(chunk.slice(0, readableLength));\n\t\tdone();\n\t}\n}\n"]}