{"version":3,"file":"loader.js","sourceRoot":"","sources":["../../src/ffmpeg/loader.ts"],"names":[],"mappings":";AAAA,0DAA0D;AAC1D,uDAAuD;;;AAEvD,iDAA0C;AAQ1C,IAAI,MAA8B,CAAC;AAEnC,MAAM,aAAa,GAAG,0BAA0B,CAAC;AAEjD,MAAM,OAAO,GAAqB;IACjC,GAAG,EAAE;;QACJ,MAAM,MAAM,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;QACxC,OAAO,MAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,IAAI,mCAAI,MAAM,CAAC;IAC/B,CAAC;IACD,GAAG,EAAE,CAAC,QAAQ;IACd,GAAG,EAAE,CAAC,QAAQ;IACd,GAAG,EAAE,CAAC,UAAU;IAChB,GAAG,EAAE,CAAC,UAAU;CAChB,CAAC;AAEF,SAAgB,UAAU,CAAC,YAAY,GAAG,KAAK;;IAC9C,IAAI,CAAC,YAAY,IAAI,MAAM,EAAE;QAC5B,OAAO,MAAM,CAAC;KACd;IAED,MAAM,QAAQ,GAAa,EAAE,CAAC;IAE9B,KAAK,MAAM,EAAE,IAAI,OAAO,EAAE;QACzB,IAAI;YACH,MAAM,OAAO,GAAG,EAAE,EAAE,CAAC;YACrB,MAAM,MAAM,GAAG,yBAAS,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,WAAW,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,QAAQ,EAAE,OAAO,EAAE,CAAC,CAAC;YACjG,IAAI,MAAM,CAAC,KAAK;gBAAE,MAAM,MAAM,CAAC,KAAK,CAAC;YACrC,IAAI,MAAM,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM;gBAAE,MAAM,IAAI,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YAEpE,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACxD,MAAM,OAAO,GAAG,MAAA,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,0CAAG,CAAC,CAAC,CAAC;YAChD,IAAI,CAAC,OAAO;gBAAE,MAAM,IAAI,KAAK,CAAC,kCAAkC,OAAO,EAAE,CAAC,CAAC;YAE3E,MAAM,GAAG,EAAE,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC;YACtC,OAAO,MAAM,CAAC;SACd;QAAC,OAAO,KAAc,EAAE;YACxB,QAAQ,CAAC,IAAI,CAAC,sBAAsB,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC;SAC1F;KACD;IAED,MAAM,IAAI,KAAK,CAAC,kCAAkC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AAC1E,CAAC;AA1BD,gCA0BC","sourcesContent":["/* eslint-disable @typescript-eslint/no-require-imports */\n/* eslint-disable @typescript-eslint/no-var-requires */\n\nimport { spawnSync } from 'child_process';\n\ninterface FFmpegInfo {\n\tcommand: string;\n\toutput: string;\n\tversion: string;\n}\n\nlet cached: FFmpegInfo | undefined;\n\nconst VERSION_REGEX = /version (.+) Copyright/im;\n\nconst SOURCES: (() => string)[] = [\n\t() => {\n\t\tconst ffmpeg = require('ffmpeg-static');\n\t\treturn ffmpeg?.path ?? ffmpeg;\n\t},\n\t() => 'ffmpeg',\n\t() => 'avconv',\n\t() => './ffmpeg',\n\t() => './avconv',\n];\n\nexport function findFFmpeg(forceRefresh = false) {\n\tif (!forceRefresh && cached) {\n\t\treturn cached;\n\t}\n\n\tconst errorLog: string[] = [];\n\n\tfor (const fn of SOURCES) {\n\t\ttry {\n\t\t\tconst command = fn();\n\t\t\tconst result = spawnSync(command, ['-h'], { windowsHide: true, shell: true, encoding: 'utf-8' });\n\t\t\tif (result.error) throw result.error;\n\t\t\tif (result.stderr && !result.stdout) throw new Error(result.stderr);\n\n\t\t\tconst output = result.output.filter(Boolean).join('\\n');\n\t\t\tconst version = VERSION_REGEX.exec(output)?.[1];\n\t\t\tif (!version) throw new Error(`Malformed FFmpeg command using ${command}`);\n\n\t\t\tcached = { command, output, version };\n\t\t\treturn cached;\n\t\t} catch (error: unknown) {\n\t\t\terrorLog.push(`- Load failure:\\n  ${error instanceof Error ? error.message : 'unknown'}`);\n\t\t}\n\t}\n\n\tthrow new Error(`Could not find FFmpeg/avconv:\\n${errorLog.join('\\n')}`);\n}\n"]}