{"version":3,"file":"OpusStream.js","sourceRoot":"","sources":["../../src/opus/OpusStream.ts"],"names":[],"mappings":";;;AACA,mCAAqD;AACrD,qCAA6C;AAE7C,IAAY,eAIX;AAJD,WAAY,eAAe;IAC1B,wDAAW,CAAA;IACX,0DAAY,CAAA;IACZ,oFAAyB,CAAA;AAC1B,CAAC,EAJW,eAAe,GAAf,uBAAe,KAAf,uBAAe,QAI1B;AAED,IAAY,OAIX;AAJD,WAAY,OAAO;IAClB,oDAAiB,CAAA;IACjB,4CAAa,CAAA;IACb,4CAAa,CAAA;AACd,CAAC,EAJW,OAAO,GAAP,eAAO,KAAP,eAAO,QAIlB;AAMD,MAAsB,UAAW,SAAQ,kBAAS;IAIjD,YAAmB,MAAwB;QAC1C,KAAK,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;QAC5B,IAAI,CAAC,OAAO,GAAG,0BAAiB,CAAC;YAChC,QAAQ,EAAE,MAAM,CAAC,QAAQ;YACzB,SAAS,EAAE,MAAM,CAAC,SAAS;YAC3B,IAAI,EAAE,MAAM,CAAC,IAAI;SACjB,CAAC,CAAC;QACH,oCAAoC;QACpC,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS,GAAG,MAAM,CAAC,QAAQ,GAAG,CAAC,CAAC;IACzD,CAAC;IAES,MAAM,CAAC,MAAc;QAC9B,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IACpC,CAAC;IAES,MAAM,CAAC,MAAc;QAC9B,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IACpC,CAAC;IAEM,QAAQ,CAAC,KAAmB,EAAE,QAAuC;QAC3E,IAAI,CAAC,OAAO,EAAE,CAAC;QACf,QAAQ,CAAC,KAAK,CAAC,CAAC;IACjB,CAAC;IAEM,MAAM,CAAC,QAAwC;QACrD,IAAI,CAAC,OAAO,EAAE,CAAC;QACf,QAAQ,EAAE,CAAC;IACZ,CAAC;IAIM,UAAU,CAAC,OAAe;QAChC,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;IACnD,CAAC;IAEM,MAAM,CAAC,OAAgB;QAC7B,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACvD,CAAC;IAEM,MAAM,CAAC,UAAkB;QAC/B,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;IACpF,CAAC;IAEO,OAAO;QACd,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;IACvB,CAAC;CACD;AAlDD,gCAkDC","sourcesContent":["import type { OpusEncoder, OpusEncoderOptions } from './adapters/OpusEncoder';\nimport { Transform, TransformOptions } from 'stream';\nimport { createOpusEncoder } from './loader';\n\nexport enum OpusApplication {\n\tVoIP = 2048,\n\tAudio = 2049,\n\tRestrictedLowDelay = 2051,\n}\n\nexport enum OpusCTL {\n\tSetBitrate = 4002,\n\tSetFEC = 4012,\n\tSetPLP = 4014,\n}\n\nexport interface OpusStreamConfig extends OpusEncoderOptions {\n\tstreamOptions?: TransformOptions;\n}\n\nexport abstract class OpusStream extends Transform {\n\tprotected readonly encoder: OpusEncoder;\n\tprotected readonly pcmLength: number;\n\n\tpublic constructor(config: OpusStreamConfig) {\n\t\tsuper(config.streamOptions);\n\t\tthis.encoder = createOpusEncoder({\n\t\t\tchannels: config.channels,\n\t\t\tframeSize: config.frameSize,\n\t\t\trate: config.rate,\n\t\t});\n\t\t// *2 because each sample is 2 bytes\n\t\tthis.pcmLength = config.frameSize * config.channels * 2;\n\t}\n\n\tprotected encode(buffer: Buffer) {\n\t\treturn this.encoder.encode(buffer);\n\t}\n\n\tprotected decode(buffer: Buffer) {\n\t\treturn this.encoder.decode(buffer);\n\t}\n\n\tpublic _destroy(error: Error | null, callback: (error: Error | null) => void): void {\n\t\tthis.cleanup();\n\t\tcallback(error);\n\t}\n\n\tpublic _final(callback: (error?: Error | null) => void): void {\n\t\tthis.cleanup();\n\t\tcallback();\n\t}\n\n\tpublic abstract applyCTL(ctl: number, value: number): void;\n\n\tpublic setBitrate(bitrate: number) {\n\t\treturn this.applyCTL(OpusCTL.SetBitrate, bitrate);\n\t}\n\n\tpublic setFEC(enabled: boolean) {\n\t\treturn this.applyCTL(OpusCTL.SetFEC, enabled ? 1 : 0);\n\t}\n\n\tpublic setPLP(percentage: number) {\n\t\treturn this.applyCTL(OpusCTL.SetPLP, Math.min(100, Math.max(0, percentage * 100)));\n\t}\n\n\tprivate cleanup() {\n\t\tthis.encoder.delete();\n\t}\n}\n"]}