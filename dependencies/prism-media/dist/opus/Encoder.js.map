{"version":3,"file":"Encoder.js","sourceRoot":"","sources":["../../src/opus/Encoder.ts"],"names":[],"mappings":";;;AACA,6CAA4D;AAE5D,MAAa,OAAQ,SAAQ,uBAAU;IAGtC,YAAmB,OAAyB;QAC3C,KAAK,CAAC;YACL,GAAG,OAAO;YACV,aAAa,EAAE;gBACd,GAAG,OAAO,CAAC,aAAa;gBACxB,kBAAkB,EAAE,IAAI;aACxB;SACD,CAAC,CAAC;QACH,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;IACrC,CAAC;IAEM,UAAU,CAAC,QAAgB,EAAE,QAAwB,EAAE,IAAuB;QACpF,MAAM,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC;QAErD,IAAI,CAAC,GAAG,CAAC,CAAC;QACV,OAAO,KAAK,CAAC,MAAM,IAAI,CAAC,GAAG,IAAI,CAAC,SAAS,EAAE;YAC1C,MAAM,GAAG,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC;YAC/C,IAAI,IAAwB,CAAC;YAC7B,IAAI;gBACH,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aAChC;YAAC,OAAO,KAAK,EAAE;gBACf,IAAI,CAAC,KAAK,CAAC,CAAC;gBACZ,OAAO;aACP;YACD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAChB,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC;SACpB;QAED,IAAI,CAAC,GAAG,CAAC;YAAE,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACxC,IAAI,EAAE,CAAC;IACR,CAAC;IAEM,QAAQ,CAAC,GAAW,EAAE,KAAa;QACzC,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IAC1C,CAAC;CACD;AAtCD,0BAsCC","sourcesContent":["import type { TransformCallback } from 'stream';\nimport { OpusStream, OpusStreamConfig } from './OpusStream';\n\nexport class Encoder extends OpusStream {\n\tprivate buffer: Buffer;\n\n\tpublic constructor(options: OpusStreamConfig) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tstreamOptions: {\n\t\t\t\t...options.streamOptions,\n\t\t\t\treadableObjectMode: true,\n\t\t\t},\n\t\t});\n\t\tthis.buffer = Buffer.allocUnsafe(0);\n\t}\n\n\tpublic _transform(newChunk: Buffer, encoding: BufferEncoding, done: TransformCallback): void {\n\t\tconst chunk = Buffer.concat([this.buffer, newChunk]);\n\n\t\tlet i = 0;\n\t\twhile (chunk.length >= i + this.pcmLength) {\n\t\t\tconst pcm = chunk.slice(i, i + this.pcmLength);\n\t\t\tlet opus: Buffer | undefined;\n\t\t\ttry {\n\t\t\t\topus = this.encoder.encode(pcm);\n\t\t\t} catch (error) {\n\t\t\t\tdone(error);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.push(opus);\n\t\t\ti += this.pcmLength;\n\t\t}\n\n\t\tif (i > 0) this.buffer = chunk.slice(i);\n\t\tdone();\n\t}\n\n\tpublic applyCTL(ctl: number, value: number): void {\n\t\tthis.encoder.applyEncoderCTL(ctl, value);\n\t}\n}\n"]}