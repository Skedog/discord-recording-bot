{"version":3,"file":"Decoder.js","sourceRoot":"","sources":["../../src/opus/Decoder.ts"],"names":[],"mappings":";;;AACA,6CAA4D;AAE5D,MAAM,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AAC1C,MAAM,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AAE1C,MAAa,OAAQ,SAAQ,uBAAU;IAItC,YAAmB,OAAyB;QAC3C,KAAK,CAAC;YACL,GAAG,OAAO;YACV,aAAa,EAAE;gBACd,GAAG,OAAO,CAAC,aAAa;gBACxB,kBAAkB,EAAE,IAAI;gBACxB,kBAAkB,EAAE,IAAI;aACxB;SACD,CAAC,CAAC;IACJ,CAAC;IAEM,UAAU,CAAC,KAAa,EAAE,QAAwB,EAAE,IAAuB;QACjF,IAAI,KAAK,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,EAAE;YAC/C,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;YACtB,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;SAC7B;aAAM,IAAI,KAAK,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,EAAE;YACtD,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;YACtB,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;SAC7B;aAAM;YACN,IAAI,KAAyB,CAAC;YAC9B,IAAI;gBACH,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;aACnC;YAAC,OAAO,KAAK,EAAE;gBACf,IAAI,CAAC,KAAK,CAAC,CAAC;gBACZ,OAAO;aACP;YACD,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACjB;QACD,IAAI,EAAE,CAAC;IACR,CAAC;IAEM,QAAQ,CAAC,GAAW,EAAE,KAAa;QACzC,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IAC1C,CAAC;CACD;AAtCD,0BAsCC","sourcesContent":["import type { TransformCallback } from 'stream';\nimport { OpusStream, OpusStreamConfig } from './OpusStream';\n\nconst OPUS_HEAD = Buffer.from('OpusHead');\nconst OPUS_TAGS = Buffer.from('OpusTags');\n\nexport class Decoder extends OpusStream {\n\tpublic opusHead?: Buffer;\n\tpublic opusTags?: Buffer;\n\n\tpublic constructor(options: OpusStreamConfig) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tstreamOptions: {\n\t\t\t\t...options.streamOptions,\n\t\t\t\twritableObjectMode: true,\n\t\t\t\treadableObjectMode: true,\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic _transform(chunk: Buffer, encoding: BufferEncoding, done: TransformCallback): void {\n\t\tif (chunk.compare(OPUS_HEAD, 0, 8, 0, 8) === 0) {\n\t\t\tthis.opusHead = chunk;\n\t\t\tthis.emit('opusHead', chunk);\n\t\t} else if (chunk.compare(OPUS_TAGS, 0, 8, 0, 8) === 0) {\n\t\t\tthis.opusTags = chunk;\n\t\t\tthis.emit('opusTags', chunk);\n\t\t} else {\n\t\t\tlet frame: Buffer | undefined;\n\t\t\ttry {\n\t\t\t\tframe = this.encoder.decode(chunk);\n\t\t\t} catch (error) {\n\t\t\t\tdone(error);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.push(frame);\n\t\t}\n\t\tdone();\n\t}\n\n\tpublic applyCTL(ctl: number, value: number): void {\n\t\tthis.encoder.applyDecoderCTL(ctl, value);\n\t}\n}\n"]}