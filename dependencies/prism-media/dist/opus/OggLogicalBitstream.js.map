{"version":3,"file":"OggLogicalBitstream.js","sourceRoot":"","sources":["../../src/opus/OggLogicalBitstream.ts"],"names":[],"mappings":";;;AAAA,oEAGoC;AACpC,mCAA6D;AAU7D;;;GAGG;AACH,MAAa,mBAAoB,SAAQ,yCAA2B;IAInE,YAAmB,OAA8C;;QAChE,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;QACjC,IAAI,CAAC,QAAQ,GAAG,MAAA,OAAO,CAAC,QAAQ,mCAAI,IAAI,gBAAQ,EAAE,CAAC;QACnD,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC;IACpF,CAAC;IAES,wBAAwB,CAAC,OAAiB;QACnD,MAAM,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,GAAG,IAAI,CAAC;QACnD,MAAM,QAAQ,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,GAAG,GAAG,UAAU,GAAG,sBAAc,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACjG,OAAO,IAAI,CAAC,eAAe,GAAG,QAAQ,CAAC;IACxC,CAAC;CACD;AAhBD,kDAgBC","sourcesContent":["import {\n\tLogicalBitstreamOptions,\n\tOggLogicalBitstream as AbstractOggLogicalBitstream,\n} from '../ogg/OggLogicalBitstream';\nimport { OpusHead, OpusTags, FRAME_SIZE_MAP } from './utils';\n\nexport interface OggOpusLogicalBitstreamOptions extends Partial<LogicalBitstreamOptions> {\n\topusHead: OpusHead;\n\topusTags: OpusTags;\n}\n\nexport type PartialOggOpusLogicalBitstreamOptions = Pick<OggOpusLogicalBitstreamOptions, 'opusHead'> &\n\tPartial<OggOpusLogicalBitstreamOptions>;\n\n/**\n * Transforms an object stream of Opus objects into a logical Ogg Opus stream that is compliant\n * with RFC7845 {@link https://tools.ietf.org/html/rfc7845}\n */\nexport class OggLogicalBitstream extends AbstractOggLogicalBitstream {\n\tpublic readonly opusHead: OpusHead;\n\tpublic readonly opusTags: OpusTags;\n\n\tpublic constructor(options: PartialOggOpusLogicalBitstreamOptions) {\n\t\tsuper(options);\n\t\tthis.opusHead = options.opusHead;\n\t\tthis.opusTags = options.opusTags ?? new OpusTags();\n\t\tthis.writeHeaderPages([[options.opusHead.toBuffer()], [this.opusTags.toBuffer()]]);\n\t}\n\n\tprotected calculateGranulePosition(packets: Buffer[]): number {\n\t\tconst sampleRate = this.opusHead.sampleRate / 1000;\n\t\tconst newCount = packets.reduce((acc, val) => acc + sampleRate * FRAME_SIZE_MAP[val[0] >> 3], 0);\n\t\treturn this.granulePosition + newCount;\n\t}\n}\n"]}