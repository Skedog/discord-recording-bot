{"version":3,"file":"OggDemuxer.js","sourceRoot":"","sources":["../../src/opus/OggDemuxer.ts"],"names":[],"mappings":"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","sourcesContent":["import { Transform, TransformCallback, TransformOptions } from 'stream';\n\nconst OGG_PAGE_HEADER_SIZE = 26;\nconst STREAM_STRUCTURE_VERSION = 0;\n\nconst OGGS_HEADER = Buffer.from('OggS');\nconst OPUS_HEAD = Buffer.from('OpusHead');\nconst OPUS_TAGS = Buffer.from('OpusTags');\n\ntype ParseResult = false | [Error] | [undefined, Buffer];\n\nexport class OggDemuxer extends Transform {\n\tprivate _remainder?: Buffer;\n\tprivate _bitstream?: number;\n\tprivate _head?: Buffer;\n\n\tpublic constructor(options?: TransformOptions) {\n\t\tsuper({ ...options, readableObjectMode: true });\n\t}\n\n\tpublic _transform(chunk: Buffer, encoding: BufferEncoding, done: TransformCallback) {\n\t\tif (this._remainder) {\n\t\t\tchunk = Buffer.concat([this._remainder, chunk]);\n\t\t\tthis._remainder = undefined;\n\t\t}\n\n\t\t// eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n\t\twhile (true) {\n\t\t\tconst result = this._readPage(chunk);\n\t\t\tif (result) {\n\t\t\t\tconst [error, buffer] = result;\n\t\t\t\tif (error) {\n\t\t\t\t\treturn done(error);\n\t\t\t\t}\n\t\t\t\tchunk = buffer!;\n\t\t\t} else break;\n\t\t}\n\t\tthis._remainder = chunk;\n\t\tdone();\n\t}\n\n\tprivate _readPage(chunk: Buffer): ParseResult {\n\t\tif (chunk.length < OGG_PAGE_HEADER_SIZE) {\n\t\t\treturn false;\n\t\t}\n\t\tif (chunk.compare(OGGS_HEADER, 0, 4, 0, 4) !== 0) {\n\t\t\treturn [new Error(`capture_pattern is not OGGS_HEADER`)];\n\t\t}\n\t\tif (chunk.readUInt8(4) !== STREAM_STRUCTURE_VERSION) {\n\t\t\treturn [new Error(`stream_structure_version is not ${STREAM_STRUCTURE_VERSION}`)];\n\t\t}\n\n\t\tif (chunk.length < 27) return false;\n\t\tconst pageSegments = chunk.readUInt8(26);\n\t\tif (chunk.length < 27 + pageSegments) return false;\n\t\tconst table = chunk.slice(27, 27 + pageSegments);\n\t\tconst bitstream = chunk.readUInt32BE(14);\n\n\t\tconst sizes = [];\n\t\tlet totalSize = 0;\n\n\t\tfor (let i = 0; i < pageSegments; ) {\n\t\t\tlet size = 0;\n\t\t\tlet x = 255;\n\t\t\twhile (x === 255) {\n\t\t\t\tif (i >= table.length) return false;\n\t\t\t\tx = table.readUInt8(i);\n\t\t\t\ti++;\n\t\t\t\tsize += x;\n\t\t\t}\n\t\t\tsizes.push(size);\n\t\t\ttotalSize += size;\n\t\t}\n\n\t\tif (chunk.length < 27 + pageSegments + totalSize) return false;\n\n\t\tlet start = 27 + pageSegments;\n\t\tfor (const size of sizes) {\n\t\t\tconst segment = chunk.slice(start, start + size);\n\t\t\tif (this._head) {\n\t\t\t\tif (segment.compare(OPUS_TAGS, 0, 8, 0, 8) === 0) this.emit('tags', segment);\n\t\t\t\telse if (this._bitstream === bitstream) this.push(segment);\n\t\t\t} else if (segment.compare(OPUS_HEAD, 0, 8, 0, 8) === 0) {\n\t\t\t\tthis.emit('head', segment);\n\t\t\t\tthis._head = segment;\n\t\t\t\tthis._bitstream = bitstream;\n\t\t\t} else {\n\t\t\t\tthis.emit('unknownSegment', segment);\n\t\t\t}\n\t\t\tstart += size;\n\t\t}\n\t\treturn [undefined, chunk.slice(start)];\n\t}\n\n\tpublic _destroy(err: Error | null, cb: (error: Error | null) => void): void {\n\t\tthis._cleanup();\n\t\tcb(err);\n\t}\n\n\tpublic _final(cb: (error?: Error) => void): void {\n\t\tthis._cleanup();\n\t\tcb();\n\t}\n\n\tpublic _cleanup() {\n\t\tthis._remainder = undefined;\n\t\tthis._head = undefined;\n\t\tthis._bitstream = undefined;\n\t}\n}\n"]}